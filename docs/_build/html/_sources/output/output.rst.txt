PDFDataExtractor can outputs results in three different manners, namely plain text, semantic and image.


Text Mode
=========
PDFDataExtractor outputs pure text by default, following below to use this feature: 


	.. code-block:: python

		#import PDFDataExtractor
		from chemdataextractor import PDFDatxExtractor

		#create a doc object
		from PDFDatxExtractor.doc import Document
		path = path
		file = open(path, 'rb')
		doc = Document.from_file(file, readers=[PdfReader()])

		#outputs as plain text
		doc.text()



Semantic Mode
=============
PDFDataExtractor can also output results as semantic information, following below to use this feature: 


	.. code-block:: python

		#import PDFDataExtractor
		from chemdataextractor import PDFDatxExtractor

		#create a doc object
		from PDFDatxExtractor.doc import Document
		path = path
		file = open(path, 'rb')
		doc = Document.from_file(file, readers=[PdfReader()])

		#outputs semantic information
		doc.abstract()
		doc.title()
		doc.journal('name')


Supported information 
---------------------

* | doc.meta() -> this will export everything in a JSON file
* | Abstract -> doc.abstract()
* | Author -> doc.author()
* | Title -> doc.title()
* | Journal name -> doc.journal('name')
* | Journal year -> doc.journal('year')
* | Journal page -> doc.journal('page')
* | Journal volume -> doc.journal('volume')
* | Reference -> doc.ref()
* | keywords -> doc.keywords()
* | Figure caption -> doc.caption('fig')
* | Table caption -> doc.caption('table')
* | DOI -> doc.doi()
* | Image -> doc.image[0] 



Image Mode
==========
PDFDataExtractor can also export images in the PDF, following below to use this feature: 

	.. code-block:: python

		#import PDFDataExtractor
		from chemdataextractor import PDFDatxExtractor

		#create a doc object
		from PDFDatxExtractor.doc import Document
		path = path
		file = open(path, 'rb')
		doc = Document.from_file(file, readers=[PdfReader()])
		
		#to access a specific image
		doc.iamge()[0]



		
		


